{"ast":null,"code":"var _jsxFileName = \"/Users/damnitstiff/Desktop/coding/shopshop/client/src/components/CategoryMenu/index.js\",\n  _s = $RefreshSig$();\n// import react dependencies\nimport React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\n// import apollo dependency\nimport { useQuery } from \"@apollo/client\";\n\n// import utils dependencies\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY, SHOW_ALL_CATEGORIES // Add a new action type\n} from \"../../utils/actions\";\nimport { QUERY_CATEGORIES } from \"../../utils/queries\";\nimport { idbPromise } from \"../../utils/helpers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CategoryMenu() {\n  _s();\n  const dispatch = useDispatch();\n  const state = useSelector(state => state);\n  const {\n    categories\n  } = state;\n  const {\n    loading,\n    data: categoryData\n  } = useQuery(QUERY_CATEGORIES);\n\n  // if categoryData, loading, or dispatch is updated, update category\n  useEffect(() => {\n    // retrieved from server\n    if (categoryData) {\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories\n      });\n      categoryData.categories.forEach(category => {\n        idbPromise(\"categories\", \"put\", category);\n      });\n    }\n    // get cache from idb\n    else if (!loading) {\n      idbPromise(\"categories\", \"get\").then(categories => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories\n        });\n      });\n    }\n  }, [categoryData, loading, dispatch]);\n\n  // update current category when button is clicked\n  const handleClick = id => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id\n    });\n  };\n\n  // Function to handle the \"Show All Categories\" button click\n  const handleShowAllCategories = () => {\n    dispatch({\n      type: SHOW_ALL_CATEGORIES\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Choose a Category:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleShowAllCategories,\n      children: \"Show All Categories\"\n    }, \"all-categories\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), categories.map(item => /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        handleClick(item._id);\n      },\n      children: item.name\n    }, item._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n}\n_s(CategoryMenu, \"j2fI8MUg+2xPcbId4z17wAYI/0E=\", false, function () {\n  return [useDispatch, useSelector, useQuery];\n});\n_c = CategoryMenu;\ne;\nexport default CategoryMenu;\nvar _c;\n$RefreshReg$(_c, \"CategoryMenu\");","map":{"version":3,"names":["React","useEffect","useDispatch","useSelector","useQuery","UPDATE_CATEGORIES","UPDATE_CURRENT_CATEGORY","SHOW_ALL_CATEGORIES","QUERY_CATEGORIES","idbPromise","jsxDEV","_jsxDEV","CategoryMenu","_s","dispatch","state","categories","loading","data","categoryData","type","forEach","category","then","handleClick","id","currentCategory","handleShowAllCategories","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","item","_id","name","_c","e","$RefreshReg$"],"sources":["/Users/damnitstiff/Desktop/coding/shopshop/client/src/components/CategoryMenu/index.js"],"sourcesContent":["// import react dependencies\nimport React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\n// import apollo dependency\nimport { useQuery } from \"@apollo/client\";\n\n// import utils dependencies\nimport {\n  UPDATE_CATEGORIES,\n  UPDATE_CURRENT_CATEGORY,\n  SHOW_ALL_CATEGORIES, // Add a new action type\n} from \"../../utils/actions\";\nimport { QUERY_CATEGORIES } from \"../../utils/queries\";\nimport { idbPromise } from \"../../utils/helpers\";\n\nfunction CategoryMenu() {\n  const dispatch = useDispatch();\n  const state = useSelector((state) => state);\n  const { categories } = state;\n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n\n  // if categoryData, loading, or dispatch is updated, update category\n  useEffect(() => {\n    // retrieved from server\n    if (categoryData) {\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories,\n      });\n      categoryData.categories.forEach((category) => {\n        idbPromise(\"categories\", \"put\", category);\n      });\n    }\n    // get cache from idb\n    else if (!loading) {\n      idbPromise(\"categories\", \"get\").then((categories) => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories,\n        });\n      });\n    }\n  }, [categoryData, loading, dispatch]);\n\n  // update current category when button is clicked\n  const handleClick = (id) => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id,\n    });\n  };\n\n  // Function to handle the \"Show All Categories\" button click\n  const handleShowAllCategories = () => {\n    dispatch({\n      type: SHOW_ALL_CATEGORIES,\n    });\n  };\n\n  return (\n    <div>\n      <h2>Choose a Category:</h2>\n      {/* Add a button to show all categories */}\n      <button\n        key=\"all-categories\"\n        onClick={handleShowAllCategories}\n      >\n        Show All Categories\n      </button>\n      {categories.map((item) => (\n        <button\n          key={item._id}\n          onClick={() => {\n            handleClick(item._id);\n          }}\n        >\n          {item.name}\n        </button>\n      ))}\n    </div>\n  );\n}\ne\nexport default CategoryMenu;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;;AAEtD;AACA,SAASC,QAAQ,QAAQ,gBAAgB;;AAEzC;AACA,SACEC,iBAAiB,EACjBC,uBAAuB,EACvBC,mBAAmB,CAAE;AAAA,OAChB,qBAAqB;AAC5B,SAASC,gBAAgB,QAAQ,qBAAqB;AACtD,SAASC,UAAU,QAAQ,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,SAASC,YAAYA,CAAA,EAAG;EAAAC,EAAA;EACtB,MAAMC,QAAQ,GAAGZ,WAAW,CAAC,CAAC;EAC9B,MAAMa,KAAK,GAAGZ,WAAW,CAAEY,KAAK,IAAKA,KAAK,CAAC;EAC3C,MAAM;IAAEC;EAAW,CAAC,GAAGD,KAAK;EAC5B,MAAM;IAAEE,OAAO;IAAEC,IAAI,EAAEC;EAAa,CAAC,GAAGf,QAAQ,CAACI,gBAAgB,CAAC;;EAElE;EACAP,SAAS,CAAC,MAAM;IACd;IACA,IAAIkB,YAAY,EAAE;MAChBL,QAAQ,CAAC;QACPM,IAAI,EAAEf,iBAAiB;QACvBW,UAAU,EAAEG,YAAY,CAACH;MAC3B,CAAC,CAAC;MACFG,YAAY,CAACH,UAAU,CAACK,OAAO,CAAEC,QAAQ,IAAK;QAC5Cb,UAAU,CAAC,YAAY,EAAE,KAAK,EAAEa,QAAQ,CAAC;MAC3C,CAAC,CAAC;IACJ;IACA;IAAA,KACK,IAAI,CAACL,OAAO,EAAE;MACjBR,UAAU,CAAC,YAAY,EAAE,KAAK,CAAC,CAACc,IAAI,CAAEP,UAAU,IAAK;QACnDF,QAAQ,CAAC;UACPM,IAAI,EAAEf,iBAAiB;UACvBW,UAAU,EAAEA;QACd,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ;EACF,CAAC,EAAE,CAACG,YAAY,EAAEF,OAAO,EAAEH,QAAQ,CAAC,CAAC;;EAErC;EACA,MAAMU,WAAW,GAAIC,EAAE,IAAK;IAC1BX,QAAQ,CAAC;MACPM,IAAI,EAAEd,uBAAuB;MAC7BoB,eAAe,EAAED;IACnB,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,MAAME,uBAAuB,GAAGA,CAAA,KAAM;IACpCb,QAAQ,CAAC;MACPM,IAAI,EAAEb;IACR,CAAC,CAAC;EACJ,CAAC;EAED,oBACEI,OAAA;IAAAiB,QAAA,gBACEjB,OAAA;MAAAiB,QAAA,EAAI;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAE3BrB,OAAA;MAEEsB,OAAO,EAAEN,uBAAwB;MAAAC,QAAA,EAClC;IAED,GAJM,gBAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAId,CAAC,EACRhB,UAAU,CAACkB,GAAG,CAAEC,IAAI,iBACnBxB,OAAA;MAEEsB,OAAO,EAAEA,CAAA,KAAM;QACbT,WAAW,CAACW,IAAI,CAACC,GAAG,CAAC;MACvB,CAAE;MAAAR,QAAA,EAEDO,IAAI,CAACE;IAAI,GALLF,IAAI,CAACC,GAAG;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAMP,CACT,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAACnB,EAAA,CAlEQD,YAAY;EAAA,QACFV,WAAW,EACdC,WAAW,EAEeC,QAAQ;AAAA;AAAAkC,EAAA,GAJzC1B,YAAY;AAmErB2B,CAAC;AACD,eAAe3B,YAAY;AAAC,IAAA0B,EAAA;AAAAE,YAAA,CAAAF,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}